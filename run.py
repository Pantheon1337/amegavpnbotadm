import os
import sys
import subprocess
import time
import signal
from dotenv import load_dotenv
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/run.log', encoding='utf-8'),
        logging.StreamHandler()  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    required_packages = [
        'python-telegram-bot',
        'sqlalchemy',
        'python-dotenv',
        'requests'
    ]
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

def check_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = [
        'TELEGRAM_TOKEN',
        'ADMIN_BOT_TOKEN',
        'ADMIN_ID',
        'XUI_HOST',
        'XUI_PORT',
        'XUI_USERNAME',
        'XUI_PASSWORD'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            logger.error(f"  - {var}")
        return False
    return True

def run_bot(script_name, max_retries=3, retry_delay=5):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    retries = 0
    while retries < max_retries:
        try:
            process = subprocess.Popen(
                [sys.executable, script_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=1  # –õ–∏–Ω–µ–π–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
            )
            logger.info(f"‚úÖ {script_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return process
        except Exception as e:
            retries += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name} (–ø–æ–ø—ã—Ç–∫–∞ {retries}/{max_retries}): {e}")
            if retries < max_retries:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(retry_delay)
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {script_name} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                return None

def restart_bot(process, script_name):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ —Å–±–æ–µ"""
    if process:
        try:
            process.terminate()
            process.wait(timeout=5)
        except:
            process.kill()
    
    logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {script_name}...")
    return run_bot(script_name)

def main():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    check_requirements()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    if not check_env():
        logger.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    main_bot = run_bot("bot.py")
    if not main_bot:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç")
        return
    
    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–¥–º–∏–Ω-–±–æ—Ç–∞
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç
    admin_bot = run_bot("admin_bot.py")
    if not admin_bot:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω-–±–æ—Ç")
        main_bot.terminate()
        return
    
    def signal_handler(signum, frame):
        logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤...")
        if main_bot:
            main_bot.terminate()
        if admin_bot:
            admin_bot.terminate()
        logger.info("‚úÖ –ë–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–≤–æ–¥ –±–æ—Ç–æ–≤
        while True:
            if main_bot:
                try:
                    output = main_bot.stdout.readline()
                    if output:
                        logger.info(f"[–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç] {output.strip()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
                    error = main_bot.stderr.readline()
                    if error:
                        logger.error(f"[–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç] –û—à–∏–±–∫–∞: {error.strip()}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
                    main_bot = restart_bot(main_bot, "bot.py")
            
            if admin_bot:
                try:
                    output = admin_bot.stdout.readline()
                    if output:
                        logger.info(f"[–ê–¥–º–∏–Ω-–±–æ—Ç] {output.strip()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
                    error = admin_bot.stderr.readline()
                    if error:
                        logger.error(f"[–ê–¥–º–∏–Ω-–±–æ—Ç] –û—à–∏–±–∫–∞: {error.strip()}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞: {e}")
                    admin_bot = restart_bot(admin_bot, "admin_bot.py")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ª–∏ –±–æ—Ç—ã
            if main_bot and main_bot.poll() is not None:
                logger.error("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
                main_bot = restart_bot(main_bot, "bot.py")
            
            if admin_bot and admin_bot.poll() is not None:
                logger.error("‚ùå –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
                admin_bot = restart_bot(admin_bot, "admin_bot.py")
            
            time.sleep(0.1)
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
        signal_handler(signal.SIGTERM, None)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    main() 
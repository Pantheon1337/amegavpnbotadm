import os
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker
from dotenv import load_dotenv
from datetime import datetime, timedelta, time
from xui_api import XUIApi
import httpx
import traceback
import sys

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/log.txt', encoding='utf-8'),
        logging.StreamHandler()  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è httpx
httpx_logger = logging.getLogger('httpx')
httpx_logger.setLevel(logging.WARNING)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å WARNING –¥–ª—è httpx

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–æ–≤
file_handler = logging.FileHandler('logs/bot.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PAYMENT_INFO, WAITING_PAYMENT, CHECKING_PAYMENT = range(3)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine('sqlite:///vpn_keys.db')
Session = sessionmaker(bind=engine)

class VPNKey(Base):
    __tablename__ = 'vpn_keys'
    
    id = Column(Integer, primary_key=True)
    key = Column(String, unique=True)
    is_used = Column(Boolean, default=False)
    user_id = Column(Integer, nullable=True)
    username = Column(String, nullable=True)
    phone = Column(String, nullable=True)
    email = Column(String, nullable=True)  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    xui_email = Column(String, nullable=True)  # –ù–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è x-ui
    xui_id = Column(String, nullable=True)  # –ù–æ–≤—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ x-ui
    activation_date = Column(DateTime, default=datetime.utcnow)
    expiration_date = Column(DateTime)

class Payment(Base):
    __tablename__ = 'payments'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    username = Column(String, nullable=True)
    phone = Column(String, nullable=True)
    status = Column(String)  # pending, approved, rejected
    receipt_path = Column(String, nullable=True)
    payment_date = Column(DateTime, default=datetime.utcnow)
    next_payment_date = Column(DateTime)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def init_db():
    Base.metadata.create_all(engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    keyboard = [
        ['üîê –ö—É–ø–∏—Ç—å VPN', 'üìä –°—Ç–∞—Ç—É—Å VPN'],
        ['üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'ü§ñ AmegaAI'],
        ['‚ÑπÔ∏è –û –Ω–∞—Å']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        with open('img/1.jpg', 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption="üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AmegaVPN\!*\n\n"
                       "üîê *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN —Å–µ—Ä–≤–∏—Å*\n\n"
                       "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode='MarkdownV2',
                reply_markup=get_keyboard()
            )
    except FileNotFoundError:
        await update.message.reply_text(
            "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AmegaVPN\!*\n\n"
            "üîê *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN —Å–µ—Ä–≤–∏—Å*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode='MarkdownV2',
            reply_markup=get_keyboard()
        )
    return ConversationHandler.END

async def buy_vpn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞
        existing_key = session.query(VPNKey).filter_by(
            user_id=update.effective_user.id,
            is_used=True
        ).first()
        
        if existing_key:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if existing_key.activation_date:
                expiry_date = existing_key.activation_date + timedelta(days=30)
                if datetime.now() > expiry_date:
                    # –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á
                    payment_text = (
                        "üí≥ *–û–ø–ª–∞—Ç–∞ VPN*\n\n"
                        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 200‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
                        "üìù *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞*\n\n"
                        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\!*\n"
                        "–ö–ª—é—á —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ *1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\. –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\.\n\n"
                        "*–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
                        "üí≥ *–¢–∏–Ω—å–∫–æ—Ñ—Ñ:* `2200 7009 0119 7003` \(–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´\) –ò–ª—å—è\.–ì\n"
                        "üí≥ *–°–±–µ—Ä:* `4276 4001 1192 0428` –ò–ª—å—è\.–ì\n"
                        "üí∞ *Bitcoin:* `1PXFB8LRTBqLLuxLWHA3Fcr3sht99BegwZ`\n"
                        "üí∞ *USDT \(TRC20\):* `TQJRXxoAG5ikM1t1Qrpfv2RKbtyhnkfJnb`\n"
                        "üí∞ *TON:* `UQA4V86WRe3ntN0Bf25mnT4P_CS6JOynw4V8GldE7ofoeCHq`\n\n"
                        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\."
                    )
                    
                    await update.message.reply_text(
                        payment_text,
                        parse_mode='MarkdownV2',
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ilyshapretty")
                        ]])
                    )
                    return WAITING_PAYMENT
                else:
                    # –ï—Å–ª–∏ —Å—Ä–æ–∫ –Ω–µ –∏—Å—Ç–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å
                    days_left = (expiry_date - datetime.now()).days
                    await update.message.reply_text(
                        f"‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á VPN\!*\n\n"
                        f"üîë *–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–ª—é—á:* `{existing_key.key}`\n"
                        f"‚è≥ *–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:* {days_left}\n\n"
                        "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –≤ —Å—Ç–∞—Ç—É—Å–µ VPN\.",
                        parse_mode='MarkdownV2',
                        reply_markup=get_keyboard()
                    )
                    return ConversationHandler.END
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á
                payment_text = (
                    "üí≥ *–û–ø–ª–∞—Ç–∞ VPN*\n\n"
                    "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 200‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
                    "üìù *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞*\n\n"
                    "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\!*\n"
                    "–ö–ª—é—á —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ *1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\. –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\.\n\n"
                    "*–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
                    "üí≥ *–¢–∏–Ω—å–∫–æ—Ñ—Ñ:* `2200 7009 0119 7003` \(–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´\) –ò–ª—å—è\.–ì\n"
                    "üí≥ *–°–±–µ—Ä:* `4276 4001 1192 0428` –ò–ª—å—è\.–ì\n"
                    "üí∞ *Bitcoin:* `1PXFB8LRTBqLLuxLWHA3Fcr3sht99BegwZ`\n"
                    "üí∞ *USDT \(TRC20\):* `TQJRXxoAG5ikM1t1Qrpfv2RKbtyhnkfJnb`\n"
                    "üí∞ *TON:* `UQA4V86WRe3ntN0Bf25mnT4P_CS6JOynw4V8GldE7ofoeCHq`\n\n"
                    "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\."
                )
                
                await update.message.reply_text(
                    payment_text,
                    parse_mode='MarkdownV2',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ilyshapretty")
                    ]])
                )
                return WAITING_PAYMENT

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π
        payment_text = (
            "üí≥ *–û–ø–ª–∞—Ç–∞ VPN*\n\n"
            "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 200‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
            "üìù *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞*\n\n"
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\!*\n"
            "–ö–ª—é—á —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ *1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\. –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\.\n\n"
            "*–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
            "üí≥ *–¢–∏–Ω—å–∫–æ—Ñ—Ñ:* `2200 7009 0119 7003` \(–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´\) –ò–ª—å—è\.–ì\n"
            "üí≥ *–°–±–µ—Ä:* `4276 4001 1192 0428` –ò–ª—å—è\.–ì\n"
            "üí∞ *Bitcoin:* `1PXFB8LRTBqLLuxLWHA3Fcr3sht99BegwZ`\n"
            "üí∞ *USDT \(TRC20\):* `TQJRXxoAG5ikM1t1Qrpfv2RKbtyhnkfJnb`\n"
            "üí∞ *TON:* `UQA4V86WRe3ntN0Bf25mnT4P_CS6JOynw4V8GldE7ofoeCHq`\n\n"
            "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\."
        )
        
        await update.message.reply_text(
            payment_text,
            parse_mode='MarkdownV2',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ilyshapretty")
            ]])
        )
        return WAITING_PAYMENT
    finally:
        session.close()

async def handle_payment_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞\!*\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ\.",
            parse_mode='MarkdownV2'
        )
        return WAITING_PAYMENT

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–µ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('receipts', exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        receipt_path = f"receipts/{update.effective_user.id}_{update.message.message_id}.jpg"
        await file.download_to_drive(receipt_path)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = update.effective_user
        username = f"@{user.username}" if user.username else None
        phone = user.phone_number if hasattr(user, 'phone_number') else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        session = Session()
        payment = Payment(
            user_id=update.effective_user.id,
            username=username,
            phone=phone,
            status='pending',
            receipt_path=receipt_path,
            payment_date=datetime.utcnow(),
            next_payment_date=datetime.utcnow() + timedelta(days=30)
        )
        session.add(payment)
        session.commit()
        payment_id = payment.id
        session.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = int(os.getenv('ADMIN_ID'))
        try:
            admin_bot = Application.builder().token(os.getenv('ADMIN_BOT_TOKEN')).build()
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{payment_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            with open(receipt_path, 'rb') as photo_file:
                await admin_bot.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_file,
                    caption=f"üì® *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂*\n\n"
                           f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n"
                           f"ID: `{user.id}`\n"
                           f"Username: {username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                           f"–¢–µ–ª–µ—Ñ–æ–Ω: `{phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n\n"
                           f"üÜî *ID –ø–ª–∞—Ç–µ–∂–∞:* `{payment_id}`\n"
                           f"üìä *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                    parse_mode='MarkdownV2',
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            await update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\.*\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
                parse_mode='MarkdownV2'
            )
            return WAITING_PAYMENT

        await update.message.reply_text(
            "‚úÖ *–°–ø–∞—Å–∏–±–æ\!*\n\n"
            "üìù –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\.\n"
            "üîë –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á VPN —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\.",
            parse_mode='MarkdownV2'
        )
        return CHECKING_PAYMENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞\.*\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
            parse_mode='MarkdownV2'
        )
        return WAITING_PAYMENT

async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
    if update.message.text in ['üîê –ö—É–ø–∏—Ç—å VPN', 'üìä –°—Ç–∞—Ç—É—Å VPN', 'üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'ü§ñ AmegaAI', '‚ÑπÔ∏è –û –Ω–∞—Å']:
        return await handle_message(update, context)

    session = Session()
    try:
        payment = session.query(Payment).filter_by(
            user_id=update.effective_user.id,
            status='pending'
        ).first()

        if payment and payment.status == 'approved':
            # –í—ã–¥–∞–µ–º –∫–ª—é—á
            available_key = session.query(VPNKey).filter_by(is_used=False).first()
            if available_key:
                available_key.is_used = True
                available_key.user_id = update.effective_user.id
                available_key.activation_date = datetime.now()
                key = available_key.key
                identifier = key.split('#')[-1] if '#' in key else None
                if identifier and identifier.startswith('AmegaVPN-'):
                    identifier = identifier[len('AmegaVPN-'):]
                available_key.xui_email = identifier
                xui_id = None
                try:
                    xui_id = key.split('://')[1].split('@')[0]
                except Exception:
                    pass
                available_key.xui_id = xui_id
                session.commit()
                
                keyboard = [
                    [InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data=f"copy_{available_key.id}")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å VPN", callback_data="vpn_status")]
                ]
                
                await update.message.reply_text(
                    "üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\!*\n\n"
                    f"üîë *–í–∞—à –∫–ª—é—á VPN:*\n"
                    f"`{available_key.key}`\n\n"
                    "üì± *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É*\n\n"
                    "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\!",
                    parse_mode='MarkdownV2',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                await vpn_status(update, context)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå *–û—à–∏–±–∫–∞\!*\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π\.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
                    parse_mode='MarkdownV2',
                    reply_markup=get_keyboard()
                )
                return ConversationHandler.END
        elif payment and payment.status == 'rejected':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment.status = 'rejected'
            session.commit()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            context.user_data.clear()
            
            await update.message.reply_text(
                "‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\!*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
                parse_mode='MarkdownV2',
                reply_markup=get_keyboard()
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚è≥ *–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è*\n\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\.",
                parse_mode='MarkdownV2',
                reply_markup=get_keyboard()
            )
            return CHECKING_PAYMENT
    finally:
        session.close()

def get_location_from_key(key: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∫–ª—é—á–∞ VPN"""
    try:
        # –ò—â–µ–º —á–∞—Å—Ç—å –∫–ª—é—á–∞ –ø–æ—Å–ª–µ #AmegaVPN-vpn-
        if '#AmegaVPN-vpn-' in key:
            location_part = key.split('#AmegaVPN-vpn-')[1].split('-')[0].lower()
            
            # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–æ–∫–∞—Ü–∏–π
            locations = {
                'germany': '–ì–µ—Ä–º–∞–Ω–∏—è',
                'bulgary': '–ë–æ–ª–≥–∞—Ä–∏—è',
                'austria': '–ê–≤—Å—Ç—Ä–∏—è',
                'france': '–§—Ä–∞–Ω—Ü–∏—è'
            }
            
            return locations.get(location_part, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∫–ª—é—á–∞: {e}")
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è'

async def vpn_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.callback_query:
            user_id = update.callback_query.from_user.id
            message = update.callback_query.message
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            user_id = update.effective_user.id
            message = update.message
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with Session() as session:
            logger.debug(f"–ü–æ–∏—Å–∫ –∫–ª—é—á–∞ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            user = session.query(VPNKey).filter(VPNKey.user_id == user_id).first()
            
            if not user:
                logger.warning(f"–ö–ª—é—á VPN –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                text = (
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ VPN.\n\n"
                    "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîê –ö—É–ø–∏—Ç—å VPN'."
                )
                if update.callback_query:
                    await update.callback_query.message.reply_text(text)
                else:
                    await update.message.reply_text(text)
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user.key}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á–∞
            purchase_date = user.activation_date
            if not purchase_date:
                logger.warning(f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
                purchase_date = datetime.now()
                
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏)
            expiry_date = purchase_date + timedelta(days=30)
            logger.debug(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {expiry_date}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if datetime.now() > expiry_date:
                status_text = "‚ùå –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
                logger.info(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                logger.info(f"–ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            purchase_date_str = purchase_date.strftime("%d.%m.%Y")
            expiry_date_str = expiry_date.strftime("%d.%m.%Y")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∫–ª—é—á–∞
            location = get_location_from_key(user.key)
            logger.debug(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {location}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ VPN*\n\n"
                f"üîë *–ö–ª—é—á:* `{user.key}`\n"
                f"üì° *–õ–æ–∫–∞—Ü–∏—è:* {location}\n"
                f"üìÖ *–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:* {purchase_date_str}\n"
                f"‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {expiry_date_str}\n"
                f"üìä *–°—Ç–∞—Ç—É—Å:* {status_text}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data=f"copy_{user.id}")],
            ]
            if status_text == "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω":
                keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_vpn")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º VPN —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ VPN: {str(e)}\n{traceback.format_exc()}")
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ VPN.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        try:
            if update.callback_query:
                await update.callback_query.message.reply_text(error_text)
            else:
                await update.message.reply_text(error_text)
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(send_error)}")

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url="https://t.me/ilyshapretty"),
            InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/vpn_amega")
        ]
    ]
    
    await update.message.reply_text(
        "üë®‚Äçüíª *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @ilyshapretty\n\n"
        "üì¢ *–ù–∞—à –∫–∞–Ω–∞–ª:* @vpn\_amega\n\n"
        "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\.",
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
async def copy_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    key_id = int(query.data[5:])
    session = Session()
    key = session.query(VPNKey).filter(VPNKey.id == key_id).first()
    if key:
        await query.answer(f"–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {key.key}", show_alert=True)
        await query.message.reply_text(
            f"üîë *–í–∞—à –∫–ª—é—á VPN:*\n`{key.key}`\n\n"
            "üì± *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É*\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\!",
            parse_mode='MarkdownV2'
        )
    else:
        logger.error(f"–ö–ª—é—á —Å ID {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await query.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
            parse_mode='MarkdownV2'
        )
    session.close()

async def amegaai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ AmegaAI –±–æ—Ç—É"""
    keyboard = [[
        InlineKeyboardButton("ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ AmegaAI", url="https://t.me/amegaai_bot")
    ]]
    
    await update.message.reply_text(
        "ü§ñ *AmegaAI \- –ò–ò —á–∞—Ç –±–æ—Ç*\n\n"
        "–£–º–Ω—ã–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–º–æ—â–∏\.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\.",
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def about_us(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN —Å–µ—Ä–≤–∏—Å–µ"""
    keyboard = [
        [
            InlineKeyboardButton("üåê –°–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", url="https://ilyshagavrilov.ru"),
            InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url="https://t.me/ilyshapretty")
        ],
        [
            InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/vpn_amega")
        ]
    ]
    
    await update.message.reply_text(
        "üåü *–û AmegaVPN*\n\n"
        "üîê *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n"
        "‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫ DNS\n"
        "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "‚ö°Ô∏è *–°–∫–æ—Ä–æ—Å—Ç—å:*\n"
        "‚Ä¢ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã\n"
        "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç—å\n"
        "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n\n"
        "üåç *–õ–æ–∫–∞—Ü–∏–∏:*\n"
        "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏,–ê–≤—Å—Ç—Ä–∏–∏,–ë–æ–ª–≥–∞—Ä–∏–∏,–§—Ä–∞–Ω—Ü–∏–∏\n"
        "‚Ä¢ –ù–∏–∑–∫–∏–π –ø–∏–Ω–≥\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n\n"
        "üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞\n\n"
        "üîó *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*",
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == 'üîê –ö—É–ø–∏—Ç—å VPN':
        return await buy_vpn(update, context)
    elif text == 'üìä –°—Ç–∞—Ç—É—Å VPN':
        return await vpn_status(update, context)
    elif text == 'üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        return await support(update, context)
    elif text == 'ü§ñ AmegaAI':
        return await amegaai(update, context)
    elif text == '‚ÑπÔ∏è –û –Ω–∞—Å':
        return await about_us(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_keyboard()
        )
        return ConversationHandler.END

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ
async def send_payment_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ"""
    session = Session()
    now = datetime.utcnow()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
    active_keys = session.query(VPNKey).filter_by(is_used=True).all()
    
    for key in active_keys:
        if key.activation_date:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
            expiry_date = key.activation_date + timedelta(days=30)
            days_until_expiration = (expiry_date - now).days
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5, 3 –∏ 1 –¥–µ–Ω—å
            if days_until_expiration in [5, 3, 1]:
                try:
                    message = (
                        f"‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ\!*\n\n"
                        f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å *{days_until_expiration}* "
                        f"{'–¥–µ–Ω—å' if days_until_expiration == 1 else '–¥–Ω—è' if days_until_expiration in [2,3,4] else '–¥–Ω–µ–π'}\.\n\n"
                        f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîê –ö—É–ø–∏—Ç—å VPN'\."
                    )
                    
                    await context.bot.send_message(
                        chat_id=key.user_id,
                        text=message,
                        parse_mode='MarkdownV2',
                        reply_markup=get_keyboard()
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {key.user_id} –∑–∞ {days_until_expiration} –¥–Ω–µ–π")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {key.user_id}: {e}")
    
    session.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "ü§ñ *AmegaVPN Bot*\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start \- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help \- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üîê –ö—É–ø–∏—Ç—å VPN \- –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å VPN \- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ \- –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode='MarkdownV2',
        reply_markup=get_keyboard()
    )
    return ConversationHandler.END

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")
    try:
        if query.data.startswith("copy_"):
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª—é—á–∞ –∏–∑ callback_data
            key_id = int(query.data[5:])
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            session = Session()
            key = session.query(VPNKey).filter(VPNKey.id == key_id).first()
            if key:
                await query.message.reply_text(
                    f"üîë *–í–∞—à –∫–ª—é—á VPN:*\n`{key.key}`\n\n"
                    "üì± *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É*\n\n"
                    "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\!",
                    parse_mode='MarkdownV2'
                )
            else:
                logger.error(f"–ö–ª—é—á —Å ID {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await query.message.reply_text(
                    "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
                    parse_mode='MarkdownV2'
                )
        elif query.data == "renew_vpn":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—é VPN
            payment_text = (
                "üí≥ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN*\n\n"
                "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 200‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
                "üìù *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à –∫–ª—é—á –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω*\n\n"
                "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\!*\n"
                "–ö–ª—é—á —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ *1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\. –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\.\n\n"
                "*–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
                "üí≥ *–¢–∏–Ω—å–∫–æ—Ñ—Ñ:* `2200 7009 0119 7003` \(–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´\) –ò–ª—å—è\.–ì\n"
                "üí≥ *–°–±–µ—Ä:* `4276 4001 1192 0428` –ò–ª—å—è\.–ì\n"
                "üí∞ *Bitcoin:* `1PXFB8LRTBqLLuxLWHA3Fcr3sht99BegwZ`\n"
                "üí∞ *USDT \(TRC20\):* `TQJRXxoAG5ikM1t1Qrpfv2RKbtyhnkfJnb`\n"
                "üí∞ *TON:* `UQA4V86WRe3ntN0Bf25mnT4P_CS6JOynw4V8GldE7ofoeCHq`\n\n"
                "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\."
            )
            
            await query.message.reply_text(
                payment_text,
                parse_mode='MarkdownV2',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ilyshapretty")
                ]])
            )
            return WAITING_PAYMENT
        elif query.data == "buy_vpn":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫—É–ø–∫–µ VPN
            return await buy_vpn(update, context)
        elif query.data == "vpn_status":
            return await vpn_status(update, context)
        elif query.data == "support":
            return await support(update, context)
        elif query.data.startswith("approve_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = int(query.data.split("_")[1])
            await handle_payment_action(update, context, "approve", payment_id)
        elif query.data.startswith("reject_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = int(query.data.split("_")[1])
            await handle_payment_action(update, context, "reject", payment_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=get_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {str(e)}")
        await query.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
            parse_mode='MarkdownV2'
        )

async def handle_payment_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, payment_id: int):
    session = Session()
    try:
        payment = session.query(Payment).filter_by(id=payment_id).first()
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        payment.status = action
        session.commit()
        logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} {action}ed")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if action == 'approved':
                message = "‚úÖ *–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\!*\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á VPN –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\."
            else:
                message = "‚ùå *–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\."
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = [
                ['üîê –ö—É–ø–∏—Ç—å VPN', 'üìä –°—Ç–∞—Ç—É—Å VPN'],
                ['üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'ü§ñ AmegaAI'],
                ['‚ÑπÔ∏è –û –Ω–∞—Å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await context.bot.send_message(
                chat_id=payment.user_id,
                text=message,
                parse_mode='MarkdownV2',
                reply_markup=reply_markup
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if action == 'rejected':
                context.user_data.clear()
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
                return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        await update.callback_query.message.reply_text(
            f"‚úÖ *–ü–ª–∞—Ç–µ–∂ {action}ed\!*",
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
    finally:
        session.close()

def main():
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è httpx –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        application = (
            Application.builder()
            .token(os.getenv('TELEGRAM_TOKEN'))
            .http_version('1.1')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP/1.1 –≤–º–µ—Å—Ç–æ HTTP/2
            .get_updates_http_version('1.1')
            .persistence(None)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            .build()
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^üîê –ö—É–ø–∏—Ç—å VPN$'), buy_vpn),
                CallbackQueryHandler(buy_vpn, pattern='^renew_vpn$')
            ],
            states={
                WAITING_PAYMENT: [
                    MessageHandler(filters.PHOTO, handle_payment_receipt),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ],
                CHECKING_PAYMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, check_payment_status)
                ]
            },
            fallbacks=[
                CommandHandler('start', start),
                CommandHandler('help', help_command),
                MessageHandler(filters.Regex('^üîê –ö—É–ø–∏—Ç—å VPN$'), buy_vpn),
                MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç—É—Å VPN$'), vpn_status),
                MessageHandler(filters.Regex('^üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞$'), support),
                MessageHandler(filters.Regex('^ü§ñ AmegaAI$'), amegaai),
                MessageHandler(filters.Regex('^‚ÑπÔ∏è –û –Ω–∞—Å$'), about_us)
            ],
            allow_reentry=True,
            persistent=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è ConversationHandler
            name='payment_conversation',
            per_message=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            per_chat=True,  # –í–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            per_user=True  # –í–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.Regex('^üîê –ö—É–ø–∏—Ç—å VPN$'), buy_vpn))
        application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç—É—Å VPN$'), vpn_status))
        application.add_handler(MessageHandler(filters.Regex('^üë®‚Äçüíª –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞$'), support))
        application.add_handler(MessageHandler(filters.Regex('^ü§ñ AmegaAI$'), amegaai))
        application.add_handler(MessageHandler(filters.Regex('^‚ÑπÔ∏è –û –Ω–∞—Å$'), about_us))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ
        job_queue = application.job_queue
        job_queue.run_daily(send_payment_reminder, time=time(hour=12, minute=0))

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs('receipts', exist_ok=True)
        os.makedirs('img', exist_ok=True)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            pool_timeout=30.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—É–ª–∞
            read_timeout=30.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
            write_timeout=30.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
            connect_timeout=30.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}\n{traceback.format_exc()}")
        raise

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")
        sys.exit(1)

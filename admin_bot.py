import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from bot import Base, Payment, VPNKey
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_KEY = 1

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///vpn_keys.db')
Session = sessionmaker(bind=engine)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != os.getenv('ADMIN_ID'):
        await update.message.reply_text("‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ\.*", parse_mode='MarkdownV2')
        return

    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data="show_payments")],
        [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data="manage_keys")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π", callback_data="show_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ AmegaVPN*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )

async def show_pending_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    pending_payments = session.query(Payment).filter_by(status='pending').all()
    
    if not pending_payments:
        await update.callback_query.message.reply_text(
            "üì≠ *–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\.*",
            parse_mode='MarkdownV2'
        )
        return

    for payment in pending_payments:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{payment.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment.id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            with open(payment.receipt_path, 'rb') as photo:
                await update.callback_query.message.reply_photo(
                    photo=photo,
                    caption=f"üì® *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂*\n\n"
                           f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{payment.user_id}`\n"
                           f"üÜî *ID –ø–ª–∞—Ç–µ–∂–∞:* `{payment.id}`\n"
                           f"üìä *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                    parse_mode='MarkdownV2',
                    reply_markup=reply_markup
                )
        except FileNotFoundError:
            await update.callback_query.message.reply_text(
                f"üì® *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂*\n\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{payment.user_id}`\n"
                f"üÜî *ID –ø–ª–∞—Ç–µ–∂–∞:* `{payment.id}`\n"
                f"üìä *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                f"‚ùå *–û—à–∏–±–∫–∞:* –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode='MarkdownV2',
                reply_markup=reply_markup
            )

async def show_keys_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π", callback_data="list_all_keys"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–∏", callback_data="add_keys")
        ],
        [
            InlineKeyboardButton("üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª—é—á–∏", callback_data="list_free_keys"),
            InlineKeyboardButton("üîí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏", callback_data="list_used_keys")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        "üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ VPN*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != os.getenv('ADMIN_ID'):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    query = update.callback_query
    await query.answer()

    if query.data == "show_payments":
        await show_pending_payments(update, context)
    elif query.data == "manage_keys":
        await show_keys_management(update, context)
    elif query.data == "show_stats":
        await show_keys_statistics(update, context)
    elif query.data == "list_all_keys":
        await list_all_keys(update, context)
    elif query.data == "list_free_keys":
        await list_free_keys(update, context)
    elif query.data == "list_used_keys":
        await list_used_keys(update, context)
    elif query.data.startswith("approve_") or query.data.startswith("reject_"):
        action, payment_id = query.data.split('_')
        payment_id = int(payment_id)
        await handle_payment_action(update, context, action, payment_id)

async def handle_payment_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, payment_id: int):
    session = Session()
    payment = session.query(Payment).filter_by(id=payment_id).first()
    
    if not payment:
        await update.callback_query.message.reply_text("‚ùå *–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\.*", parse_mode='MarkdownV2')
        return

    if action == "approve":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞
        available_key = session.query(VPNKey).filter_by(is_used=False).first()
        if not available_key:
            await update.callback_query.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞\! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π\.*\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏\.",
                parse_mode='MarkdownV2'
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment.status = 'approved'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email –¥–ª—è x-ui
        email = f"user_{payment.user_id}@amegavpn.com"
        
        # –í—ã–¥–∞–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        available_key.is_used = True
        available_key.user_id = payment.user_id
        available_key.username = payment.username
        available_key.phone = payment.phone
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è x-ui
        key = available_key.key
        identifier = key.split('#')[-1] if '#' in key else None
        if identifier and identifier.startswith('AmegaVPN-'):
            identifier = identifier[len('AmegaVPN-'):]
        available_key.xui_email = identifier
        # –ò–∑–≤–ª–µ–∫–∞–µ–º xui_id (–º–µ–∂–¥—É '://' –∏ '@')
        xui_id = None
        try:
            xui_id = key.split('://')[1].split('@')[0]
        except Exception:
            pass
        available_key.xui_id = xui_id
        available_key.activation_date = datetime.utcnow()
        available_key.expiration_date = payment.next_payment_date
        
        session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        try:
            main_bot = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
            keyboard = [[
                InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data=f"copy_{available_key.key}")
            ]]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            expiration_date = available_key.expiration_date.strftime('%d\.%m\.%Y')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
            key_message = (
                "üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\!*\n\n"
                "üîë *–í–∞—à –∫–ª—é—á VPN:*\n"
                f"`{available_key.key}`\n\n"
                "üì± *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É*\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
                "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
                "‚Ä¢ –ö–ª—é—á —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ *1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ*\n"
                "‚Ä¢ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∫–ª—é—á –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –¥–æ {expiration_date}"
            )
            
            await main_bot.bot.send_message(
                chat_id=payment.user_id,
                text=key_message,
                parse_mode='MarkdownV2',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                await main_bot.bot.send_message(
                    chat_id=payment.user_id,
                    text=key_message,
                    parse_mode='MarkdownV2'
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {e}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        expiration_date = available_key.expiration_date.strftime('%d\.%m\.%Y')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username —Å @
        username = payment.username if payment.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞—Ç–µ–∂–æ–º
        caption = (
            "üì® *–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω*\n\n"
            "üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n"
            f"ID: `{payment.user_id}`\n"
            f"Username: {username}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{payment.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
            f"üìß Email: `{email}`\n\n"
            f"üÜî *ID –ø–ª–∞—Ç–µ–∂–∞:* `{payment.id}`\n"
            "‚úÖ *–°—Ç–∞—Ç—É—Å:* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
            f"üîë *–í—ã–¥–∞–Ω –∫–ª—é—á:* `{available_key.key}`\n"
            f"üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –¥–æ {expiration_date}"
        )
        
        await update.callback_query.message.edit_caption(
            caption=caption,
            parse_mode='MarkdownV2'
        )
    else:
        payment.status = 'rejected'
        session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        try:
            main_bot = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
            await main_bot.bot.send_message(
                chat_id=payment.user_id,
                text="‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\!*\n\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\.",
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username —Å @
        username = payment.username if payment.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞—Ç–µ–∂–æ–º
        caption = (
            "üì® *–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω*\n\n"
            "üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n"
            f"ID: `{payment.user_id}`\n"
            f"Username: {username}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{payment.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n\n"
            f"üÜî *ID –ø–ª–∞—Ç–µ–∂–∞:* `{payment.id}`\n"
            "‚ùå *–°—Ç–∞—Ç—É—Å:* –û—Ç–∫–ª–æ–Ω–µ–Ω"
        )
        
        await update.callback_query.message.edit_caption(
            caption=caption,
            parse_mode='MarkdownV2'
        )

async def list_all_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    keys = session.query(VPNKey).all()
    
    if not keys:
        await update.callback_query.message.reply_text(
            "‚ùå *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π\.*",
            parse_mode='MarkdownV2'
        )
        return

    message = "üìã *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π:*\n\n"
    for key in keys:
        status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if not key.is_used else "üîí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        message += f"üÜî *ID:* `{key.id}`\n"
        message += f"üîë *–ö–ª—é—á:* `{key.key}`\n"
        message += f"üìä *–°—Ç–∞—Ç—É—Å:* {status}\n\n"

    await update.callback_query.message.reply_text(
        message,
        parse_mode='MarkdownV2'
    )

async def list_free_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    keys = session.query(VPNKey).filter_by(is_used=False).all()
    
    if not keys:
        await update.callback_query.message.reply_text(
            "‚ùå *–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π\.*",
            parse_mode='MarkdownV2'
        )
        return

    message = "üîç *–°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π:*\n\n"
    for key in keys:
        message += f"üÜî *ID:* `{key.id}`\n"
        message += f"üîë *–ö–ª—é—á:* `{key.key}`\n\n"

    await update.callback_query.message.reply_text(
        message,
        parse_mode='MarkdownV2'
    )

async def list_used_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    keys = session.query(VPNKey).filter_by(is_used=True).all()
    
    if not keys:
        await update.callback_query.message.reply_text(
            "‚ùå *–ù–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π\.*",
            parse_mode='MarkdownV2'
        )
        return

    message = "üîí *–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π:*\n\n"
    for key in keys:
        message += f"üÜî *ID:* `{key.id}`\n"
        message += f"üîë *–ö–ª—é—á:* `{key.key}`\n"
        message += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{key.user_id}`\n\n"

    await update.callback_query.message.reply_text(
        message,
        parse_mode='MarkdownV2'
    )

async def show_keys_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    total_keys = session.query(VPNKey).count()
    used_keys = session.query(VPNKey).filter_by(is_used=True).count()
    free_keys = total_keys - used_keys

    message = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π VPN:*\n\n"
        f"üì¶ *–í—Å–µ–≥–æ –∫–ª—é—á–µ–π:* `{total_keys}`\n"
        f"üîí *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* `{used_keys}`\n"
        f"‚úÖ *–°–≤–æ–±–æ–¥–Ω–æ:* `{free_keys}`\n"
        f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* `{(used_keys/total_keys*100):.1f}%`"
    )

    await update.callback_query.message.reply_text(
        message,
        parse_mode='MarkdownV2'
    )

async def add_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π VPN, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\.",
        parse_mode='MarkdownV2'
    )
    return WAITING_KEY

async def handle_new_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞\!*\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π\.",
            parse_mode='MarkdownV2'
        )
        return WAITING_KEY

    keys = update.message.text.strip().split('\n')
    session = Session()
    added_count = 0

    for key in keys:
        key = key.strip()
        if key:
            try:
                new_key = VPNKey(key=key, is_used=False)
                session.add(new_key)
                added_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key}: {e}")

    session.commit()
    session.close()

    await update.message.reply_text(
        f"‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π\.*",
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_keys")
        ]])
    )
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(os.getenv('ADMIN_BOT_TOKEN')).build()

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π
    add_keys_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_keys, pattern="^add_keys$")],
        states={
            WAITING_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_keys)]
        },
        fallbacks=[CommandHandler("start", start)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(add_keys_handler)
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 